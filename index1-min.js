var userAddress,provider,signer;async function connectWallet(){console.log("Connect Wallet clicked"),provider=new ethers.providers.Web3Provider(window.ethereum),console.log("here"),await provider.send("eth_requestAccounts",[]),console.log(provider),signer=provider.getSigner();let e=await signer.getAddress(),t=(await provider.getNetwork()).name;console.log(t);let n=await provider.getBalance(e);document.getElementById("wallet").innerText=`${e}   Network: ${t}   Bal: ${(+ethers.utils.formatEther(n)).toFixed(4)}`,setUpContract()}const contractAddress="0x3010449e8c4B58dd037428b6D7C34bde490b4cE2";var contract;async function setUpContract(){contractJSON=await fetch("../abis/contract.json").then((e=>e.json())).then((e=>{let t=e.output.contracts["contracts/Greeter.sol"].Greeter;return console.log(t),t})),console.log(contractJSON);const e=contractJSON.abi;console.log(e),console.log("Create contract obj"),contract=new ethers.Contract(contractAddress,e,signer),console.log(contract),console.log("contract ready for interaction"),contract.on("GreeterEvent",((e,t)=>{console.log("Event GreeterEvent received: new greeting is ",e),console.log("Event GreeterEvent received: event obj is ",t)})),document.getElementById("cAddress").innerText=contractAddress}async function getContractInfo(){console.log("Fetching contract info...");const e=await contract.owner();console.log(e);const t=await contract.greet();console.log(t);const n=await contract.getBalance();console.log(n),document.getElementById("cOwner").innerText=e,document.getElementById("cGreeting").innerText=t,document.getElementById("cBalance").innerText=`${(+ethers.utils.formatEther(n)).toFixed(4)} ETH`}async function newGreeting(){let e=document.getElementById("newgreeting").value;console.log(`Updating new greeting to ${e} ...`);const t=await contract.setGreeting(e,{value:ethers.utils.parseEther("0.001")}),n=await t.wait();1!==n.status?alert("Setting new greeting failed"):(console.log(`Greeting succeesfully updated to ${e}`),console.log(n),console.log(BigInt(n.gasUsed)),console.log(n.effectiveGasPrice),console.log(BigInt(n.cumulativeGasUsed)))}async function sendToken(){let e=document.getElementById("sendToken").value;console.log(`Sending to ${e} ETH to contract...`),transaction={to:contractAddress,value:ethers.utils.parseEther(e,"ether")};const n=await signer.sendTransaction(transaction);1!==(await n.wait()).status?alert("Send token failed"):console.log(`${t} oken successfully sent`)}async function withdrawToken(){console.log("Withdrawing balance from contract...");const e=await contract.withdraw();1!==(await e.wait()).status?alert("Withdraw balance failed"):console.log("Balance succeesfully withdrawn")}